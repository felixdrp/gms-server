{"version":3,"sources":["graphql/comment-type.js"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AA8BA,IAAM,cAAc,+BAAsB;AACzC,QAAM,SAAN;AACA,eAAa,uBAAb;AACA,UAAQ;WAAO;AACb,UAAI;AACF,cAAM,mDAAN;AACA,qBAAa,wBAAb;OAFF;AAIA,cAAQ;AACN,oCADM;AAEN,qBAAa,sBAAb;OAFF;AAIA,YAAM;AACJ,oCADI;AAEJ,qBAAa,mBAAb;OAFF;AAIA,iBAAW;AACT,iCADS;AAET,qBAAa,wBAAb;OAFF;AAIA,cAAQ;AACN,iCADM;AAEN,qBAAa,cAAb;OAFF;AAIA,gBAAU;AACR,iCADQ;AAER,qBAAa,gBAAb;OAFF;;AAKA,eAAS;AACP,kCADO;AAEP,qBAAa,6BAAb;OAFF;;GA1BM;CAHW,CAAd;;;kBAqCS;AAER,IAAM,8BAAW;AACtB,QAAM,iBAAN;AACA,cAAY,yFAAZ;CAFW","file":"graphql/comment-type.js","sourcesContent":["import {\n  graphql,\n  GraphQLObjectType,\n  GraphQLList,\n  GraphQLString,\n  GraphQLNonNull,\n  GraphQLInt,\n  GraphQLJson,\n} from 'graphql'\n\n/**\n * We define our Comment type.\n *\n * This implements the following type system shorthand:\n *   type Comment {\n *     // String! = not null String\n *     id: String!\n *\n *     userId: String\n *     body: String\n *     timeStamp: Integer\n *     upVote: Integer\n *     downVote: Integer\n *\n * \t\t// recursive\n *    // https://github.com/graphql/graphql-js/issues/23\n *     replies: [CommentType]\n *   }\n */\n\nconst commentType = new GraphQLObjectType({\n name: 'Comment',\n description: 'Generic Comment type.',\n fields: () => ({\n   id: {\n     type: new GraphQLNonNull( GraphQLString ),\n     description: 'The id of the Comment.',\n   },\n   userId: {\n     type: GraphQLString,\n     description: 'The comment user id.',\n   },\n   body: {\n     type: GraphQLString,\n     description: 'The comment text.',\n   },\n   timestamp: {\n     type: GraphQLInt,\n     description: 'The comment timestamp.',\n   },\n   upVote: {\n     type: GraphQLInt,\n     description: 'The Up Vote.',\n   },\n   downVote: {\n     type: GraphQLInt,\n     description: 'The Down Vote.',\n   },\n   // https://github.com/graphql/graphql-js/issues/23\n   replies: {\n     type: GraphQLJson,\n     description: 'The replies to the comment.',\n    //  resolve: comment => getComment(comment),\n   }\n })\n});\n\nexport default commentType\n\nexport const fragment = {\n  name: 'CommentFragment',\n  definition: 'fragment CommentFragment on Comment {id,userId,body,timestamp,upVote,downVote,replies }'\n}\n"],"sourceRoot":"/source/"}