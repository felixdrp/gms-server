{"version":3,"sources":["graphql/topic-type.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,IAAM,YAAY,+BAAsB;AACvC,QAAM,OAAN;AACA,eAAa,6DAAb;AACA,UAAQ;AACN,QAAI;AACF,YAAM,mDAAN;AACA,mBAAa,sBAAb;KAFF;AAIA,WAAO;AACL,kCADK;AAEL,mBAAa,0BAAb;KAFF;AAIA,cAAU;AACR,YAAM,qDAAN;AACA,mBAAa,2DAAb;KAFF;AAIA,aAAS;AACP,YAAM,6CAAN;AACA,mBAAa,mDAAb;KAFF;AAIA,eAAW;AACT,YAAM,6CAAN;AACA,mBAAa,+BAAb;KAFF;;;;;;;;;;;;;;;AAkBA,cAAU;AACR,YAAM,+BAAsB;AAC1B,cAAM,KAAN;AACA,sCAAU,OAAO;;AAEd,iBAAO,KAAP,CAFc;SAFS;OAAtB,CAAN;KADF;GAnCF;CAHiB,CAAZ;;AAkDN,SAAS,WAAT,CAAqB,OAArB,EAA8B,EAA9B;;kBAIe;AAER,IAAM,8BAAW;AACtB,QAAM,eAAN;AACA,cAAY,4CAAZ;CAFW","file":"graphql/topic-type.js","sourcesContent":["import {\n  graphql,\n  GraphQLObjectType,\n  GraphQLList,\n  GraphQLString,\n  GraphQLNonNull,\n  GraphQLScalarType,\n} from 'graphql'\n\nimport WordFrequencyType from './word-frequency-type'\nimport StoryType from './story-type'\nimport TweetType from './tweet-type'\nimport CommentType from './comment-type'\n\n/**\n * We define our Topic type.\n *\n * This implements the following type system shorthand:\n *   type Topic {\n *     // String! = not null String\n *     id: String!\n *     title: String\n *     tagWords: [WordFrequencyType]\n *     // news List?\n *     urlList: [StoryType]\n *     tweetList: [TweetType]\n *     comments: [CommentType]\n *   }\n */\n\nconst topicType = new GraphQLObjectType({\n name: 'Topic',\n description: 'The subject or theme of a discourse or of one of its parts.',\n fields: {\n   id: {\n     type: new GraphQLNonNull( GraphQLString ),\n     description: 'The id of the topic.',\n   },\n   title: {\n     type: GraphQLString,\n     description: 'The topic title or name.',\n   },\n   tagWords: {\n     type: new GraphQLList( WordFrequencyType ),\n     description: 'The topic tag words. It will be used to create tag clouds',\n   },\n   urlList: {\n     type: new GraphQLList( StoryType ),\n     description: 'These are individual stories below to that Topic.',\n   },\n   tweetList: {\n     type: new GraphQLList( TweetType ),\n     description: 'The topic related tweet list.',\n   },\n   // JSON Object with all the comments. This way it loose the type definition check.\n   // https://github.com/graphql/graphql-js/pull/242#issuecomment-192583517\n   // Another option is to make hierarchical data in linear one.\n   // Ex:\n   //\n   // a---b\n   //  \\\n   //   \\-c\n   //\n   // a\n   // a.b\n   // a.c\n   // Then we could use the graphql type system.\n   // This option force the graphql consumer to recreate the hierarchical data.\n   comments: {\n     type: new GraphQLScalarType({\n       name: 'Raw',\n       serialize(value) {\n          //  any kind of data\n          return value;\n       }\n     })\n   }\n }\n});\n\nfunction getComments(comment) {\n\n}\n\nexport default topicType\n\nexport const fragment = {\n  name: 'TopicFragment',\n  definition: 'fragment TopicFragment on Topic {id,title}'\n}\n"],"sourceRoot":"/source/"}