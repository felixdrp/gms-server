{"version":3,"sources":["graphql/schema.js"],"names":[],"mappings":"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","file":"graphql/schema.js","sourcesContent":["import {\n  graphql,\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLList,\n  GraphQLString,\n  GraphQLInt,\n} from 'graphql'\n\nimport {\n  userType,\n  topicList,\n  topicType\n} from './'\n\n\nimport data from './data.json'\nimport dataTopicList from './data-topic-list-real.json'\n\n// Some test calls:\n// http://localhost:8009/graphql?query={user(id:\"1\"){name}}\n// http://localhost:8009/graphql?query={collections}\n\n// Define our user type, with two string fields; `id` and `name`\nvar collectionType = new GraphQLList(GraphQLString);\n\nconst collectionSources = [\n  'News',\n  // Twitter\n  'Social Media',\n  'Blogs',\n  'Photos',\n  'Videos',\n  'Live Diary',\n];\n\n// http://localhost:8009/graphql?query={topicList(amount:1){...TopicFragment,urlList{url}}} fragment TopicFragment on Topic {id,title}\n//\n// http://localhost:8009/graphql?query={__type(name:\"Topic\"){name,kind,description,fields{name,type}}}\n//\n// Define our schema, with one top level field, named `user`, that\n// takes an `id` argument and returns the User with that ID.\n\nconst queryType = new GraphQLObjectType({\n  name: 'Query',\n  fields: () => ({\n    user: {\n      type: userType,\n      args: {\n        id: { type: GraphQLString }\n      },\n      resolve: function (_, args) {\n        return data[args.id];\n      }\n    },\n    collections: {\n      type: collectionType,\n      args: {\n        // id: { type: GraphQLString }\n      },\n      resolve: function (_, args) {\n        return collectionSources;\n      }\n    },\n    topicList: {\n      type: topicList,\n      args: {\n        offset: { type: GraphQLString }\n      },\n      resolve: function (_, args) {\n        return Promise.resolve({\n          offset: args.offset || '0',\n          timestamp: Date.now().toString(),\n          topics: (\n            // // Please import the json file file data-topic-list\n            // dataTopicList,\n\n            // Please import the json file data-topic-list-real.json\n            // Function to format TopList data from data-topic-list-real.json\n            () => {\n              let formatedTopicList = [],\n                  topics = dataTopicList.topics,\n                  topic = 0,\n\n                  // Vars to process tagWords.\n                  tagWords = [],\n                  tagWordsMap = [],\n                  words = [],\n\n                  // Vars to process urlList.\n                  urlList = [],\n                  urls = [],\n                  documents = [],\n\n                  // Temporal vars.\n                  i = 0,\n                  j = 0;\n\n              for ( topic of Object.keys( topics ).sort() ) {\n                // Process tagWords\n                tagWords = [];\n                tagWordsMap = new Map();\n                // Convert in array of words.\n\n                // Calc the words frequency\n                for ( i = 0; i < topics[topic].words.length; i++ ) {\n                  words = (topics[topic].words[i] || '').split(' ');\n\n                  for ( j = 0; j < words.length; j++ ) {\n                    tagWordsMap.set(\n                      words[j],\n                      tagWordsMap.has( words[j] ) ?\n                        tagWordsMap.get( words[j] ) + 1 :\n                        1\n                    )\n                  }\n                }\n\n                tagWordsMap.forEach(\n                  (value, key) => {\n                    tagWords.push({\n                      word:key,\n                      frequency: value\n                    });\n                  }\n                );\n                tagWords = tagWords.sort(\n                  (a, b) => {\n                    // if Equal freq then sort by word\n                    if ( b.frequency - a.frequency == 0 ) {\n                      return b.word < a.word;\n                    }\n\n                    return b.frequency - a.frequency;\n                  });\n                // console.log(tagWords)\n\n\n                // Process NEWs\n                urlList = [];\n                urls = topics[topic].urls || [];\n                documents = topics[topic].documents || [];\n\n                for ( i = 0; i < urls.length; i++ ) {\n                  urlList.push(\n                    {\n                      url: urls[i] || null,\n                      story: documents[i] || null,\n                      title: null,\n                    }\n                  );\n                }\n\n                formatedTopicList.push(\n                  {\n                    id: topic,\n                    title: topics[topic].title || 'Topic ' + topic,\n                    tagWords,\n                    urlList,\n\n                  }\n                );\n              }\n              return formatedTopicList;\n            }\n          ),\n        });\n      }\n    }\n\n  })\n});\n\nconst schema = new GraphQLSchema({\n  query: queryType\n});\n\nexport default schema\n"],"sourceRoot":"/source/"}