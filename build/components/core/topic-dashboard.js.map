{"version":3,"sources":["components/core/topic-dashboard.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAI,UAAU,2BAAV;;;;;;;;AASJ,IAAI,YAAY,gBAAM,WAAN,CAAkB;;;AAChC,WAAS;AACP,kCAAW,UAAW;AACpB,UAAI,SAAS,CAAT,CADgB;AAEpB,UAAK,YAAY,SAAS,KAAT,EAAiB;AAChC,iBAAS,SAAS,KAAT,CAAe,MAAf,IAAyB,CAAzB,CADuB;OAAlC;;AAIA,aAAO;AACL,gBAAQ,gBAAR;AACA,iEAEwB,gHAIX,oBAAc,IAAd,uIAOT,oBAAc,UAAd,gBAbJ;OAFF,CANoB;KADf;GAAT;;AA4BA,kCAAY;;AAEV,YAAQ,GAAR,CAAa,QAAQ,OAAR,CAAiB,KAAK,WAAL,CAAiB,SAAjB,CAA4B,KAAK,KAAL,CAAW,QAAX,CAA5B,CAAkD,KAAlD,CAA9B;;GA/B8B;AA6BpB,AAOZ,gCAAU,WAAW;AACnB,WACE;;;MACE;;;QAAK,UAAU,KAAV;OADP;MAGG,UAAU,OAAV,CAAkB,GAAlB,CACC,UAAC,KAAD;eACE;;;;UACQ;;cAAG,MAAM,MAAM,GAAN,EAAT;YAAqB,MAAM,GAAN;eAArB;WADR;;OADF,CAJJ;KADF,CADmB;GApCW;AAoDhC,4BAAS;;;AACP,QAAI,QAAQ,KAAK,KAAL,CADL;;AAGP,WACE;;QAAK,IAAG,gBAAH,EAAL;MACE;;UAAK,WAAU,aAAV,EAAL;QACE,gEAA4B,KAAK,KAAL,CAD9B;OADF;MAKE;;UAAK,WAAU,eAAV,EAAL;QACE;;YAAK,OAAO;AACF,uBAAS,MAAT;AACA,6BAAe,KAAf;AACA,8BAAgB,QAAhB;AACA,0BAAY,QAAZ;AACA,qBAAO,MAAP;AACA,wBAAU,GAAV;aANL;WAAL;UASE;;cAAK,WAAU,EAAV,EAAa,OAAO,EAAC,MAAM,CAAN,EAAR,EAAlB;YACE;;;;aADF;YAEE;;gBAAK,SAAU;yBAAM,MAAK,SAAL;iBAAN,EAAf;cACC,UAAU,KAAK,SAAL,EAAV;aAHH;WATF;SADF;OALF;MAwBE,uCAAK,WAAU,aAAV,EAAwB,OAAO,EAAP,EAA7B,CAxBF;KADF,CAHO;GApDuB;CAAlB,CAAZ;;AAuFJ,SAAS,eAAT,CAAyB,KAAzB,EAAgC,QAAhC,EAA0C;AACxC,SAAO;;AAEL,YAAQ,SAAS,MAAT;AACR,cAAU,SAAS,QAAT;GAHZ,CADwC;CAA1C;kBAOe,yBAAQ,eAAR,EAAyB,SAAzB","file":"components/core/topic-dashboard.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router'\nimport TopHeaderMenuContainer from './top-header-menu-container'\nimport SearchCompact from './search-compact'\n\n// Used to create the query to fetch data.\nimport { fragment as TopicFragment } from '../../graphql/topic-type'\n\n\n// Fetch data.\nimport globalFetch from '../../data-fetch/global-fetch'\n\nvar fetcher = new globalFetch();\n\n\n\n/**\n * Component that renders the '/' (root) view.\n *\n */\n\nvar Dashboard = React.createClass({\n  statics: {\n    fetchData( location ) {\n      let offset = 0;\n      if ( location && location.query ) {\n        offset = location.query.offset || 0;\n      }\n\n      return {\n        action: 'add_topic_list',\n        query: `\n          {\n            topicList(offset:\"${offset}\") {\n              offset,\n              timestamp,\n              topics {\n                ...${TopicFragment.name},\n                urlList {\n                  url\n                }\n              }\n            }\n          }\n          ${TopicFragment.definition}\n         `,\n      }\n    }\n  },\n\n  fetchData() {\n\n    console.log( fetcher.getData( this.constructor.fetchData( this.props.location ).query ) );\n    // return fetcher.getData( this.constructor.fetchData( this.props.location ).query );\n\n  },\n\n  topicItem(topicInfo) {\n    return (\n      <div>\n        <h1>{topicInfo.title}</h1>\n\n        {topicInfo.urlList.map(\n          (story) => (\n            <div>\n              story <a href={story.url}>{story.url} </a>\n            </div>\n          )\n        )}\n      </div>\n    );\n  },\n\n  render() {\n    let props = this.props;\n\n    return (\n      <div id=\"topicDashboard\">\n        <div className=\"main-header\">\n          <TopHeaderMenuContainer {...this.props} />\n        </div>\n\n        <div className=\"main-viewport\">\n          <div style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    width: '100%',\n                    maxWidth: 600,\n                  }}\n          >\n            <div className=\"\" style={{flex: 1}} >\n              <h3>Topic list</h3>\n              <div onClick={ () => this.fetchData() }>\n              {'hola' || this.topicItem()}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"main-footer\" style={{}}>\n        </div>\n      </div>\n    );\n  }\n});\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    // if route contains params\n    params: ownProps.params,\n    location: ownProps.location\n  };\n}\nexport default connect(mapStateToProps)(Dashboard);\n"],"sourceRoot":"/source/"}