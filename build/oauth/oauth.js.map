{"version":3,"sources":["oauth/oauth.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;IAEqB;AACnB,WADmB,KACnB,CAAY,IAAZ,EAAkB;wCADC,OACD;GAAlB;;;;;;;6BADmB;;oCAQQ;UAAZ,6DAAO,kBAAK;;;AAEzB,UAAI,OAAO,KAAK,IAAL,IAAa,EAAb;;;AAEP,qBAAe,KAAK,YAAL,IAAqB,EAArB;UACf,QAAQ,SAAR,KAAQ;eAAM,KAAK,KAAL,CAAY,KAAK,MAAL,KAAgB,YAAhB,CAAZ,CAA2C,QAA3C,CAAqD,YAArD;OAAN,CALa;AAMzB,aAAO,MAAO,IAAP,EACE,IADF,CACQ,OADR,EAEE,MAFF,CAEU;eAAQ,OAAO,OAAP;OAAR,CAFjB,CANyB;;;;;;;2BAaT;UAAZ,6DAAO,kBAAK;;;;;;AAKhB,UAAI,kBAAkB;AACpB,4BAAoB,KAAK,WAAL,IAAoB,2BAApB;AACpB,qBAAa,KAAK,KAAL,IAAc,kCAAd;;AAEb,gCAAwB,KAAK,eAAL,IAAwB,WAAxB;AACxB,yBAAiB,KAAK,eAAL,IAAwB,KAAK,GAAL,GAAW,QAAX,GAAsB,KAAtB,CAA4B,CAA5B,EAA+B,CAAC,CAAD,CAAvD;AACjB,uBAAe,KAAK,OAAL,IAAgB,KAAhB;OANb;;;AALY,UAeX,KAAK,KAAL,EAAa;AAChB,qDACK;AACH,uBAAa,KAAK,KAAL;UAFf,CADgB;OAAlB;;;AAfgB,UAuBX,KAAK,KAAL,EAAa;AAChB,qDACK,iBACA,KAAK,KAAL,CAFL,CADgB;OAAlB;;;AAvBgB,UA+BX,KAAK,KAAL,EAAa;AAChB,qDACK,iBACA,KAAK,IAAL,CAFL,CADgB;OAAlB;;;;AA/BgB,UAwCZ,kBAAkB,oBAAY,eAAZ,EAA6B,IAA7B,GAAoC,MAApC,CACpB,UAAC,IAAD,EAAO,IAAP,EAAgB;AACd,eAAO,OAAQ,GAAR,GAAc,mBAAmB,IAAnB,CAAd,GAAyC,GAAzC,GAA+C,mBAAmB,gBAAgB,IAAhB,CAAnB,CAA/C,CADO;OAAhB,EAEG,EAHiB,CAAlB;;AAxCY,qBA8ChB,GAAkB,gBAAgB,SAAhB,CAA0B,CAA1B,CAAlB,CA9CgB;AA+ChB,cAAQ,GAAR,CAAY,eAAZ;;;AA/CgB,UAkDZ,gBAAgB,UAAU,mBAAmB,6CAAnB,CAAV,GAA8E,GAA9E,GAAoF,mBAAmB,eAAnB,CAApF,CAlDJ;AAmDhB,UAAI,QAAQ,sPAAR,CAnDY;AAoDhB,cAAQ,GAAR,CAAY,iBAAiB,KAAjB,CAAZ;;;;AApDgB,UAwDZ,iBAAiB,oDAAjB,CAxDY;AAyDhB,UAAI,YAAY,mBAAoB,cAApB,IAAuC,GAAvC,CAzDA;AA0DhB,UAAI,OAAO,OAAO,UAAP,CAAkB,MAAlB,EAA0B,SAA1B,EAAqC,MAArC,CAA4C,aAA5C,EAA2D,MAA3D,CAAkE,QAAlE,CAAP,CA1DY;;AA4DhB,cAAQ,GAAR,CAAY,sBAAsB,mBAAoB,IAApB,CAAtB,GAAmD,GAAnD,CAAZ,CA5DgB;AA6DhB,cAAQ,GAAR,CAAY,sDAAZ,EA7DgB;;AA+DhB,aAAO,mBAAoB,IAApB,CAAP,CA/DgB;;;SArBC","file":"oauth/oauth.js","sourcesContent":["\n\nexport default class OAuth {\n  constructor(type) {\n\n  }\n\n  // Return a random code to use in the oauth_nonce\n  // More info:\n  // https://dev.twitter.com/oauth/overview/authorizing-requests\n  getOAuthNonce( data = {} ) {\n    // The size of the response.\n    let size = data.size || 42,\n        // The codification: 2 binary, 8 octal, 16 hex, 36 number and alphabet\n        codification = data.codification || 36,\n        codec = () => Math.floor( Math.random() * codification ).toString( codification );\n    return Array( size )\n            .fill( codec() )\n            .reduce( prev => prev + codec() );\n  }\n\n\n  // Sign for the oauth protocol.\n  sign( data = {} ) {\n    // https://dev.twitter.com/oauth/overview/creating-signatures\n    // Tweet token 1 step\n    //\n\n    var signComponents1 = {\n      oauth_consumer_key: data.consumerKey || \"AntPzHq9fsnTPbbaP0nrwngJt\",\n      oauth_nonce: data.nonce || \"69e3594f96e53f1a23bd8e5cea3cb0fc\",\n      // oauth_signature: \"puHy3%2BFnuOJqRTveYcv8pQWzn%2BM%3D\",\n      oauth_signature_method: data.signatureMethod || \"HMAC-SHA1\",\n      oauth_timestamp: data.oauth_timestamp || Date.now().toString().slice(0, -3),\n      oauth_version: data.version || \"1.0\",\n    }\n\n    // If it has the token, to add token.\n    if ( data.token ) {\n      signComponents1 = {\n        ...signComponents1,\n        oauth_token: data.token,\n      }\n    }\n\n    // If it has a query, to add query.\n    if ( data.query ) {\n      signComponents1 = {\n        ...signComponents1,\n        ...data.query,\n      }\n    }\n\n    // If it has a body, to add body.\n    if ( data.query ) {\n      signComponents1 = {\n        ...signComponents1,\n        ...data.body,\n      }\n    }\n\n    // If it has a\n\n    var parameterString = Object.keys(signComponents1).sort().reduce(\n      (prev, curr) => {\n        return prev  + '&' + encodeURIComponent(curr) + '=' + encodeURIComponent(signComponents1[curr])\n      }, ''\n    )\n    // parameterString = 'include_entities=true' + parameterString;\n    parameterString = parameterString.substring(1);\n    console.log(parameterString)\n\n    // Tweet token 2 step\n    var signatureBase = 'POST&' + encodeURIComponent('https://api.twitter.com/oauth/request_token') + '&' + encodeURIComponent(parameterString);\n    var test2 = 'POST&https%3A%2F%2Fapi.twitter.com%2Foauth%2Frequest_token&oauth_consumer_key%3DAntPzHq9fsnTPbbaP0nrwngJt%26oauth_nonce%3D69e3594f96e53f1a23bd8e5cea3cb0fc%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1458429951%26oauth_version%3D1.0'\n    console.log(signatureBase == test2)\n\n    // Tweet token 3 step\n\n    var customerSecret = 'z3cbkta9cgkzTOmxREHcoGa8NRaaDXsSk5TfHVpOLkXEEYzmbU';\n    var keySecret = encodeURIComponent( customerSecret ) + '&';\n    var hash = crypto.createHmac('SHA1', keySecret).update(signatureBase).digest('base64')\n\n    console.log('oauth_signature:\"' + encodeURIComponent( hash ) + '\"')\n    console.log('oauth_signature:\"puHy3%2BFnuOJqRTveYcv8pQWzn%2BM%3D\"')\n\n    return encodeURIComponent( hash );\n  }\n\n}\n"],"sourceRoot":"/source/"}