{"version":3,"sources":["oauth/oauth.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqB;AACnB,WADmB,KACnB,CAAY,IAAZ,EAAkB;wCADC,OACD;GAAlB;;;;;;;6BADmB;;oCAQQ;UAAZ,6DAAO,kBAAK;;;AAEzB,UAAI,OAAO,KAAK,IAAL,IAAa,EAAb;;;AAEP,qBAAe,KAAK,YAAL,IAAqB,EAArB;UACf,QAAQ,SAAR,KAAQ;eAAM,KAAK,KAAL,CAAY,KAAK,MAAL,KAAgB,YAAhB,CAAZ,CAA2C,QAA3C,CAAqD,YAArD;OAAN,CALa;AAMzB,aAAO,MAAO,IAAP,EACE,IADF,CACQ,OADR,EAEE,MAFF,CAEU;eAAQ,OAAO,OAAP;OAAR,CAFjB,CANyB;;;;;;;2BAaT;UAAZ,6DAAO,kBAAK;;AAChB,UAAI,SAAS,KAAK,MAAL,IAAe,EAAf;UACT,iBAAiB,KAAK,cAAL,IAAuB,EAAvB;UACjB,oBAAoB,KAAK,iBAAL,IAA0B,EAA1B;;;;;;AAHR,UASZ,kBAAkB;AACpB,4BAAoB,OAAO,kBAAP,IAA6B,EAA7B;AACpB,qBAAa,OAAO,WAAP,IAAsB,EAAtB;AACb,gCAAwB,OAAO,sBAAP,IAAiC,WAAjC;AACxB,yBAAiB,OAAO,eAAP,IAA0B,KAAK,GAAL,GAAW,QAAX,GAAsB,KAAtB,CAA4B,CAA5B,EAA+B,CAAC,CAAD,CAAzD;AACjB,uBAAe,OAAO,aAAP,IAAwB,KAAxB;OALb;;;AATY,UAkBX,OAAO,cAAP,EAAwB;AAC3B,qDACK;AACH,0BAAgB,OAAO,cAAP;UAFlB,CAD2B;OAA7B;;;AAlBgB,UA0BX,KAAK,KAAL,EAAa;AAChB,qDACK;AACH,uBAAa,KAAK,KAAL;UAFf,CADgB;OAAlB;;;AA1BgB,UAkCX,KAAK,KAAL,EAAa;AAChB,qDACK,iBACA,KAAK,KAAL,CAFL,CADgB;OAAlB;;;AAlCgB,UA0CX,KAAK,IAAL,EAAY;AACf,qDACK,iBACA,KAAK,IAAL,CAFL,CADe;OAAjB;;;;AA1CgB,UAmDZ,kBAAkB,oBAAa,eAAb,EAA+B,IAA/B,GAAsC,MAAtC,CACpB,UAAC,IAAD,EAAO,IAAP,EAAgB;AACd,eAAO,OAAQ,GAAR,GAAc,mBAAmB,IAAnB,CAAd,GAAyC,GAAzC,GAA+C,mBAAmB,gBAAgB,IAAhB,CAAnB,CAA/C,CADO;OAAhB,EAEG,EAHiB,CAAlB;;;AAnDY,qBA0DhB,GAAkB,gBAAgB,SAAhB,CAA0B,CAA1B,CAAlB;;;;AA1DgB,UA8DZ,gBAAgB,KAAK,WAAL,GAAmB,GAAnB,GAAyB,mBAAoB,KAAK,GAAL,CAA7C,GAA0D,GAA1D,GAAgE,mBAAmB,eAAnB,CAAhE;;;;;;AA9DJ,UAoEZ,YAAY,mBAAoB,cAApB,IAAuC,GAAvC,GAA6C,mBAAoB,iBAApB,CAA7C,CApEA;AAqEhB,UAAI,OAAO,iBAAO,UAAP,CAAkB,MAAlB,EAA0B,SAA1B,EAAqC,MAArC,CAA4C,aAA5C,EAA2D,MAA3D,CAAkE,QAAlE,CAAP;;;;;AArEY,aA0ET,mBAAoB,IAApB,CAAP,CA1EgB;;;SArBC","file":"oauth/oauth.js","sourcesContent":["import crypto from 'crypto'\n\nexport default class OAuth {\n  constructor(type) {\n\n  }\n\n  // Return a random code to use in the oauth_nonce\n  // More info:\n  // https://dev.twitter.com/oauth/overview/authorizing-requests\n  getOAuthNonce( data = {} ) {\n    // The size of the response.\n    let size = data.size || 42,\n        // The codification: 2 binary, 8 octal, 16 hex, 36 number and alphabet\n        codification = data.codification || 36,\n        codec = () => Math.floor( Math.random() * codification ).toString( codification );\n    return Array( size )\n            .fill( codec() )\n            .reduce( prev => prev + codec() );\n  }\n\n\n  // Sign for the oauth protocol.\n  sign( data = {} ) {\n    let header = data.header || {},\n        customerSecret = data.customerSecret || '',\n        accessTokenSecret = data.accessTokenSecret || '';\n\n    // https://dev.twitter.com/oauth/overview/creating-signatures\n    // Tweet token 1 step\n    //\n\n    var signComponents1 = {\n      oauth_consumer_key: header.oauth_consumer_key || '',\n      oauth_nonce: header.oauth_nonce || '',\n      oauth_signature_method: header.oauth_signature_method || \"HMAC-SHA1\",\n      oauth_timestamp: header.oauth_timestamp || Date.now().toString().slice(0, -3),\n      oauth_version: header.oauth_version || \"1.0\",\n    }\n\n    // If it has the callback, to add callback.\n    if ( header.oauth_callback ) {\n      signComponents1 = {\n        ...signComponents1,\n        oauth_callback: header.oauth_callback,\n      }\n    }\n\n    // If it has the token, to add token.\n    if ( data.token ) {\n      signComponents1 = {\n        ...signComponents1,\n        oauth_token: data.token,\n      }\n    }\n\n    // If it has a query, to add query.\n    if ( data.query ) {\n      signComponents1 = {\n        ...signComponents1,\n        ...data.query,\n      }\n    }\n\n    // If it has a body, to add body.\n    if ( data.body ) {\n      signComponents1 = {\n        ...signComponents1,\n        ...data.body,\n      }\n    }\n\n    // console.log(signComponents1)\n\n    var parameterString = Object.keys( signComponents1 ).sort().reduce(\n      (prev, curr) => {\n        return prev  + '&' + encodeURIComponent(curr) + '=' + encodeURIComponent(signComponents1[curr])\n      }, ''\n    )\n    // parameterString = 'include_entities=true' + parameterString;\n    // Remove the first char &\n    parameterString = parameterString.substring(1);\n    // console.log(parameterString)\n\n    // Tweet token 2 step\n    var signatureBase = data.http_method + '&' + encodeURIComponent( data.url ) + '&' + encodeURIComponent(parameterString);\n    // var test2 = 'POST&https%3A%2F%2Fapi.twitter.com%2Foauth%2Frequest_token&oauth_consumer_key%3DAntPzHq9fsnTPbbaP0nrwngJt%26oauth_nonce%3D69e3594f96e53f1a23bd8e5cea3cb0fc%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1458429951%26oauth_version%3D1.0'\n    // console.log(signatureBase == test2)\n\n    // Tweet token 3 step\n\n    var keySecret = encodeURIComponent( customerSecret ) + '&' + encodeURIComponent( accessTokenSecret );\n    var hash = crypto.createHmac('SHA1', keySecret).update(signatureBase).digest('base64')\n\n    // console.log('oauth_signature:\"' + encodeURIComponent( hash ) + '\"')\n    // console.log('oauth_signature:\"puHy3%2BFnuOJqRTveYcv8pQWzn%2BM%3D\"')\n\n    return encodeURIComponent( hash );\n  }\n\n}\n"],"sourceRoot":"/source/"}