{"version":3,"sources":["data-fetch/twitter-oauth.js"],"names":[],"mappings":"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","file":"data-fetch/twitter-oauth.js","sourcesContent":["/**\n * Module to Facade the data fetch from server and client.\n *\n *\n * Example usage:\n * ```\n * //Server\n * var fetcher = new GlobalFetch('server')\n *\n * // Client\n * var fetcher = new GlobalFetch()\n *\n * ```\n */\n\nimport https from 'https'\nimport crypto from 'crypto'\n\nexport default class TwitterOAuth {\n  constructor(type) {\n    this.optionsBase = {\n      host: 'api.twitter.com',\n      port: 443,\n      method: 'POST',\n    };\n\n    this.optionsRequest = ( authorization ) => {\n      let auth = authorization || 'OAuth oauth_consumer_key=\"AntPzHq9fsnTPbbaP0nrwngJt\", oauth_nonce=\"69e3594f96e53f1a23bd8e5cea3cb0fc\", oauth_signature=\"puHy3%2BFnuOJqRTveYcv8pQWzn%2BM%3D\", oauth_signature_method=\"HMAC-SHA1\", oauth_timestamp=\"1458429951\", oauth_version=\"1.0\"';\n      return {\n        ...this.optionsBase,\n        path: '/oauth/request_token',\n        headers: {\n          'Authorization': auth\n        }\n      }\n    };\n\n    this.optionsAuthenticate = ( authorization ) => {\n      let auth = authorization || 'OAuth oauth_consumer_key=\"AntPzHq9fsnTPbbaP0nrwngJt\", oauth_nonce=\"69e3594f96e53f1a23bd8e5cea3cb0fc\", oauth_signature=\"puHy3%2BFnuOJqRTveYcv8pQWzn%2BM%3D\", oauth_signature_method=\"HMAC-SHA1\", oauth_timestamp=\"1458429951\", oauth_version=\"1.0\"';\n      return {\n        ...this.optionsBase,\n        method: 'GET',\n        path: '/oauth/authenticate',\n        headers: {\n          'Authorization': auth\n        }\n      }\n    };\n\n    this.options_other = ( authorization ) => {\n      let auth = authorization || 'OAuth oauth_consumer_key=\"AntPzHq9fsnTPbbaP0nrwngJt\", oauth_nonce=\"69e3594f96e53f1a23bd8e5cea3cb0fc\", oauth_signature=\"puHy3%2BFnuOJqRTveYcv8pQWzn%2BM%3D\", oauth_signature_method=\"HMAC-SHA1\", oauth_timestamp=\"1458429951\", oauth_version=\"1.0\"';\n      return {\n        ...this.optionsBase,\n        method: 'GET',\n        path: '/oauth/authenticate',\n        headers: {\n          'Authorization': auth\n        }\n      }\n    };\n\n// https://dev.twitter.com/oauth/overview/creating-signatures\n// Tweet token 1 step\n//\n\n    var signComponents1 = {\n      oauth_consumer_key: \"AntPzHq9fsnTPbbaP0nrwngJt\",\n      oauth_nonce: \"69e3594f96e53f1a23bd8e5cea3cb0fc\",\n      // oauth_signature: \"puHy3%2BFnuOJqRTveYcv8pQWzn%2BM%3D\",\n      oauth_signature_method: \"HMAC-SHA1\",\n      oauth_timestamp: Date.now().toString().slice(0, -3),\n      oauth_version: \"1.0\",\n    }\n    var parameterString = Object.keys(signComponents1).sort().reduce(\n      (prev, curr) => { return prev  + '&' + encodeURIComponent(curr) + '=' + encodeURIComponent(signComponents1[curr]) }, ''\n    )\n    // parameterString = 'include_entities=true' + parameterString;\n    parameterString = parameterString.substring(1);\n    console.log(parameterString)\n\n    // Tweet token 2 step\n    var signatureBase = 'POST&' + encodeURIComponent('https://api.twitter.com/oauth/request_token') + '&' + encodeURIComponent(parameterString);\n    var test2 = 'POST&https%3A%2F%2Fapi.twitter.com%2Foauth%2Frequest_token&oauth_consumer_key%3DAntPzHq9fsnTPbbaP0nrwngJt%26oauth_nonce%3D69e3594f96e53f1a23bd8e5cea3cb0fc%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1458429951%26oauth_version%3D1.0'\n    console.log(signatureBase == test2)\n\n    // Tweet token 3 step\n\n    var customerSecret = 'z3cbkta9cgkzTOmxREHcoGa8NRaaDXsSk5TfHVpOLkXEEYzmbU';\n    var keySecret = encodeURIComponent( customerSecret ) + '&';\n    var hash = crypto.createHmac('SHA1', keySecret).update(signatureBase).digest('base64')\n\n    console.log('oauth_signature:\"' + encodeURIComponent( hash ) + '\"')\n    console.log('oauth_signature:\"puHy3%2BFnuOJqRTveYcv8pQWzn%2BM%3D\"')\n\n\n    var signComponents2 = {\n      method: 'POST',\n\n    }\n\n    this.client = ( authorization ) => {\n      return new Promise(\n        (resolve, reject) => {\n          https.request(\n              this.optionsRequest( authorization ),\n              ( response ) => {\n                var data = '';\n                response.on('data', function (chunk) {\n                  data += chunk;\n                });\n\n                response.on('end', function () {\n                  console.log('tweet X-D: ' + data);\n                  resolve( data );\n                });\n              }\n            )\n            .end();\n        }\n      );\n    };\n  }\n\n  async getData(query) {\n    let result = {};\n\n    try {\n      result = await this.client( query );\n    }\n    catch (e) {\n      console.error(e);\n    }\n\n    return result;\n  }\n\n  // Return a random code to use in the oauth_nonce\n  // More info:\n  // https://dev.twitter.com/oauth/overview/authorizing-requests\n  getOAuthNonce( data = {} ) {\n    // The size of the response.\n    let size = data.size || 42,\n        // The codification: 2 binary, 8 octal, 16 hex, 36 number and alphabet\n        codification = data.codification || 36;\n    return Array( size )\n            .fill(0)\n            .reduce(\n              prev =>\n                prev +\n                Math.floor( Math.random() * codification ).toString( codification )\n            );\n  }\n\n}\n"],"sourceRoot":"/source/"}