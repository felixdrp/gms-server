{"version":3,"sources":["data-fetch/twitter-oauth.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiBqB;AACnB,WADmB,YACnB,CAAY,IAAZ,EAAkB;;;wCADC,cACD;;AAChB,SAAK,OAAL,GAAe,UAAC,KAAD,EAAW;AACxB,aAAO;AACL,cAAM,iBAAN;AACA,cAAM,GAAN;AACA,gBAAQ,MAAR;AACA,cAAM,sBAAN;AACA,iBAAS;AACP,2BAAiB,mPAAjB;SADF;OALF,CADwB;KAAX;;;;;;AADC,QAiBZ,kBAAkB;AACpB,0BAAmB,2BAAnB;AACA,mBAAY,kCAAZ;;AAEA,8BAAuB,WAAvB;AACA,uBAAgB,YAAhB;AACA,qBAAc,KAAd;KANE,CAjBY;AAyBhB,QAAI,kBAAkB,oBAAY,eAAZ,EAA6B,IAA7B,GAAoC,MAApC,CACpB,UAAC,IAAD,EAAO,IAAP,EAAgB;AAAE,aAAO,OAAQ,GAAR,GAAc,mBAAmB,IAAnB,CAAd,GAAyC,GAAzC,GAA+C,mBAAmB,gBAAgB,IAAhB,CAAnB,CAA/C,CAAT;KAAhB,EAAqH,EADjG,CAAlB;;AAzBY,mBA6BhB,GAAkB,gBAAgB,SAAhB,CAA0B,CAA1B,CAAlB,CA7BgB;AA8BhB,YAAQ,GAAR,CAAY,eAAZ;;;AA9BgB,QAiCZ,gBAAgB,UAAU,mBAAmB,6CAAnB,CAAV,GAA8E,GAA9E,GAAoF,mBAAmB,eAAnB,CAApF,CAjCJ;AAkChB,QAAI,QAAQ,sPAAR,CAlCY;AAmChB,YAAQ,GAAR,CAAY,iBAAiB,KAAjB,CAAZ;;;;AAnCgB,QAuCZ,SAAS,QAAQ,QAAR,CAAT,CAvCY;AAwChB,QAAI,iBAAiB,oDAAjB,CAxCY;AAyChB,QAAI,YAAY,mBAAoB,cAApB,IAAuC,GAAvC,CAzCA;AA0ChB,QAAI,OAAO,OAAO,UAAP,CAAkB,MAAlB,EAA0B,SAA1B,EAAqC,MAArC,CAA4C,aAA5C,EAA2D,MAA3D,CAAkE,QAAlE,CAAP,CA1CY;;AA4ChB,YAAQ,GAAR,CAAY,sBAAsB,mBAAoB,IAApB,CAAtB,GAAmD,GAAnD,CAAZ,CA5CgB;AA6ChB,YAAQ,GAAR,CAAY,sDAAZ,EA7CgB;;AAgDhB,QAAI,kBAAkB;AACpB,cAAQ,MAAR;;KADE,CAhDY;;AAsDhB,SAAK,MAAL,GAAc,UAAC,KAAD,EAAW;AACvB,aAAO,sBACL,UAAC,OAAD,EAAU,MAAV,EAAqB;AACnB,wBAAM,OAAN,CACI,MAAK,OAAL,CAAc,KAAd,CADJ,EAEI,UAAE,QAAF,EAAgB;AACd,cAAI,OAAO,EAAP,CADU;AAEd,mBAAS,EAAT,CAAY,MAAZ,EAAoB,UAAU,KAAV,EAAiB;AACnC,oBAAQ,KAAR,CADmC;WAAjB,CAApB,CAFc;;AAMd,mBAAS,EAAT,CAAY,KAAZ,EAAmB,YAAY;AAC7B,oBAAQ,GAAR,CAAY,gBAAgB,IAAhB,CAAZ,CAD6B;AAE7B,oBAAS,IAAT,EAF6B;WAAZ,CAAnB,CANc;SAAhB,CAFJ,CAcG,GAdH,GADmB;OAArB,CADF,CADuB;KAAX,CAtDE;GAAlB;;6BADmB;;;4FA8EL;YACR;;;;;yBAAS;;;uBAGI,KAAK,MAAL,CAAa,KAAb;;;AAAf;;;;;;;;AAGA,wBAAQ,KAAR;;;iDAGK;;;;;;;;;;;;;;;;;SAxFU","file":"data-fetch/twitter-oauth.js","sourcesContent":["/**\n * Module to Facade the data fetch from server and client.\n *\n *\n * Example usage:\n * ```\n * //Server\n * var fetcher = new GlobalFetch('server')\n *\n * // Client\n * var fetcher = new GlobalFetch()\n *\n * ```\n */\n\nimport https from 'https'\n\nexport default class TwitterOAuth {\n  constructor(type) {\n    this.options = (query) => {\n      return {\n        host: 'api.twitter.com',\n        port: 443,\n        method: 'POST',\n        path: '/oauth/request_token',\n        headers: {\n          'Authorization': 'OAuth oauth_consumer_key=\"AntPzHq9fsnTPbbaP0nrwngJt\", oauth_nonce=\"69e3594f96e53f1a23bd8e5cea3cb0fc\", oauth_signature=\"puHy3%2BFnuOJqRTveYcv8pQWzn%2BM%3D\", oauth_signature_method=\"HMAC-SHA1\", oauth_timestamp=\"1458429951\", oauth_version=\"1.0\"'\n        }\n      }\n    };\n\n// https://dev.twitter.com/oauth/overview/creating-signatures\n// Tweet token 1 step\n//\n\n    var signComponents1 = {\n      oauth_consumer_key:\"AntPzHq9fsnTPbbaP0nrwngJt\",\n      oauth_nonce:\"69e3594f96e53f1a23bd8e5cea3cb0fc\",\n      // oauth_signature:\"puHy3%2BFnuOJqRTveYcv8pQWzn%2BM%3D\",\n      oauth_signature_method:\"HMAC-SHA1\",\n      oauth_timestamp:\"1458429951\",\n      oauth_version:\"1.0\"\n    }\n    var parameterString = Object.keys(signComponents1).sort().reduce(\n      (prev, curr) => { return prev  + '&' + encodeURIComponent(curr) + '=' + encodeURIComponent(signComponents1[curr]) }, ''\n    )\n    // parameterString = 'include_entities=true' + parameterString;\n    parameterString = parameterString.substring(1);\n    console.log(parameterString)\n\n    // Tweet token 2 step\n    var signatureBase = 'POST&' + encodeURIComponent('https://api.twitter.com/oauth/request_token') + '&' + encodeURIComponent(parameterString);\n    var test2 = 'POST&https%3A%2F%2Fapi.twitter.com%2Foauth%2Frequest_token&oauth_consumer_key%3DAntPzHq9fsnTPbbaP0nrwngJt%26oauth_nonce%3D69e3594f96e53f1a23bd8e5cea3cb0fc%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1458429951%26oauth_version%3D1.0'\n    console.log(signatureBase == test2)\n\n    // Tweet token 3 step\n\n    var crypto = require('crypto');\n    var customerSecret = 'z3cbkta9cgkzTOmxREHcoGa8NRaaDXsSk5TfHVpOLkXEEYzmbU';\n    var keySecret = encodeURIComponent( customerSecret ) + '&';\n    var hash = crypto.createHmac('SHA1', keySecret).update(signatureBase).digest('base64')\n\n    console.log('oauth_signature:\"' + encodeURIComponent( hash ) + '\"')\n    console.log('oauth_signature:\"puHy3%2BFnuOJqRTveYcv8pQWzn%2BM%3D\"')\n\n\n    var signComponents2 = {\n      method: 'POST',\n\n    }\n\n\n    this.client = (query) => {\n      return new Promise(\n        (resolve, reject) => {\n          https.request(\n              this.options( query ),\n              ( response ) => {\n                var data = '';\n                response.on('data', function (chunk) {\n                  data += chunk;\n                });\n\n                response.on('end', function () {\n                  console.log('tweet X-D: ' + data);\n                  resolve( data );\n                });\n              }\n            )\n            .end();\n        }\n      );\n    };\n  }\n\n  async getData(query) {\n    let result = {};\n\n    try {\n      result = await this.client( query );\n    }\n    catch (e) {\n      console.error(e);\n    }\n\n    return result;\n  }\n\n}\n"],"sourceRoot":"/source/"}