{"version":3,"sources":["data-fetch/global-fetch.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,IAAI,KAAK,QAAQ,iBAAR,CAAL;;;IAIiB;AACnB,WADmB,WACnB,CAAY,IAAZ,EAAkB;;;wCADC,aACD;;AAChB,SAAK,IAAL,GAAY,QAAQ,QAAR;;AADI,QAGZ,SAAS,QAAT,EAAmB;;AAErB,WAAK,MAAL;6EAAc,iBAAO,KAAP;;;;;;yBACC,GACX;AACE,yBAAK,yCAAyC,KAAzC;AACL,0BAAM,IAAN;mBAHS;;;;;;;;;;;SADD;;;;;SAAd,CAFqB;KAAvB,MAUO;;AAEL,WAAK,MAAL;6EAAc,kBAAO,KAAP;;;;;;yBACC,GACX;AACE,yBAAK,SAAS,MAAT,GAAkB,iBAAlB,GAAsC,KAAtC;AACL,0BAAM,IAAN;mBAHS;;;;;;;;;;;SADD;;;;;SAAd;;;;AAFK,KAVP;GAHF;;6BADmB;;;6FA8BL;YACR;;;;;yBAAS;;AACb,wBAAQ,GAAR,CAAY,oBAAoB,MAApB,CAAZ;;;uBASiB,KAAK,MAAL,CAAa,KAAb;;;AAAf;;;;;;;;AAIA,wBAAQ,KAAR;;;;AAGF,wBAAQ,GAAR,CAAY,YAAY,KAAZ,CAAZ;AACA,wBAAQ,GAAR,CAAY,oBAAoB,yBAAgB,OAAO,IAAP,EAAhB,CAApB,CAAZ;kDACO,OAAO,IAAP;;;;;;;;;;;;;;SAlDU","file":"data-fetch/global-fetch.js","sourcesContent":["/**\n * Module to Facade the data fetch from server and client.\n *\n *\n * Example usage:\n * ```\n * //Server\n * var fetcher = new GlobalFetch('server')\n *\n * // Client\n * var fetcher = new GlobalFetch()\n *\n * ```\n */\n\n// import { graphql } from 'graphql'\n// require('es6-promise').polyfill();\n// import isomorphicFetch from 'isomorphic-fetch';\nvar rp = require('request-promise');\n// import schema from '../graphql/schema'\n\n\nexport default class GlobalFetch {\n  constructor(type) {\n    this.type = type || 'client';\n    // Create a different fetch for server and client\n    if (type === 'server') {\n      // Fetch data using graphql module.\n      this.client = async (query) => {\n        return await rp(\n          {\n            uri: 'http://localhost:8009/graphql?query=' + query,\n            json: true,\n          }\n        );\n      };\n    } else {\n      // Fetch data using graphql module.\n      this.client = async (query) => {\n        return await rp(\n          {\n            uri: location.origin + '/graphql?query=' + query,\n            json: true,\n          }\n        );\n      };\n      // this.client = (query) => {\n      //   return fetch(location.origin + '/graphql?query=' + query);\n      // };\n    }\n  }\n\n  async getData(query) {\n    let result = {};\n    console.log('fetching data1:' + result)\n    try {\n      // if (this.type === 'client') {\n      //   console.log('mlkkk')\n      //   result = await this.client( query );\n      //   // fetch('graphql?query=' + query).then((d)=>console.log('XXX: ' + d))\n      // } else {\n      //   // result = await this.client(schema, 'query ' + query);\n      // }\n      result = await this.client( query );\n\n    }\n    catch (e) {\n      console.error(e);\n      // throw e;\n    }\n    console.log('query: ' + query)\n    console.log('fetching data3:' + JSON.stringify( result.text() ))\n    return result.json();\n  }\n\n}\n"],"sourceRoot":"/source/"}