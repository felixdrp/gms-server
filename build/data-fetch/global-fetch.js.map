{"version":3,"sources":["data-fetch/global-fetch.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqBqB;AACnB,WADmB,WACnB,CAAY,IAAZ,EAAkB;wCADC,aACD;;AAChB,SAAK,IAAL,GAAY,QAAQ,QAAR;;;AADI,QAIZ,SAAS,QAAT,EAAmB;AACrB,WAAK,MAAL,oBADqB;KAAvB,MAEO;AACL,WAAK,MAAL,GAAc,oBAAU;AACtB,mBAAW,kCAAc,UAAd,CAAX;OADY,CAAd,CADK;KAFP;;;;;;;;;;AAJgB,GAAlB;;6BADmB;;;4FAuBL;YACR;;;;;yBAAS;;AACb,wBAAQ,GAAR,CAAY,oBAAoB,MAApB,CAAZ;;;sBAEM,KAAK,IAAL,KAAc,QAAd;;;;;AACF,wBAAQ,GAAR,CAAY,OAAZ;;uBACe,KAAK,MAAL,CAAY,KAAZ,CAAkB,eAAlB;;;AAAf;;;;;;uBAEe,KAAK,MAAL,mBAAoB,WAAW,KAAX;;;AAAnC;;;;;;;;;;AAIF,oBAAI,KAAJ;;;AAEF,wBAAQ,GAAR,CAAY,YAAY,KAAZ,CAAZ;AACA,wBAAQ,GAAR,CAAY,oBAAoB,yBAAe,MAAf,CAApB,CAAZ;iDACO;;;;;;;;;;;;;;;;;YAKH;;;;;AADJ,wBAAQ,GAAR,CAAY,OAAZ;AACI,yBAAS;;uBACE;;;AAAf;;uBACe,wCAAgB,qBAAhB;;;AAAf;;uBACe,wCAAgB,uGAAhB;;;AAAf;;;AAEA,wBAAQ,GAAR,CAAY,aAAa,yBAAe,MAAf,CAAb,CAAZ;;;;;;;;;;;;;;SAjDiB","file":"data-fetch/global-fetch.js","sourcesContent":["/**\n * Module to Facade the data fetch from server and client.\n *\n *\n * Example usage:\n * ```\n * //Server\n * var fetcher = new GlobalFetch('server')\n *\n * // Client\n * var fetcher = new GlobalFetch()\n *\n * ```\n */\n\nimport { graphql } from 'graphql'\nimport Lokka from 'lokka';\nimport { Transport } from 'lokka-transport-http';\nimport schema from '../graphql/schema'\n\n\nexport default class GlobalFetch {\n  constructor(type) {\n    this.type = type || 'client';\n    // Create a different fetch for server and client\n    // create a new Lokka client\n    if (type === 'server') {\n      this.client = graphql;\n    } else {\n      this.client = new Lokka({\n        transport: new Transport('/graphql')\n      });\n    }\n    // console.log(this.client)\n\n    // // Get the initial data from the transport (it's a promise)\n    // this.dataPromise = this.client\n    //   // invoke the GraphQL query to get all the items\n    //   .query(`\n    //     {items}\n    //   `)\n    //   .then(res => res.items);\n  }\n\n  async getData(query) {\n    let result = {};\n    console.log('fetching data1:' + result)\n    try {\n      if (this.type === 'client') {\n        console.log('mlkkk')\n        result = await this.client.query('{collections}');\n      } else {\n        result = await this.client(schema, 'query ' + query);\n      }\n    }\n    catch(e) {\n      new Throw(e);\n    }\n    console.log('query: ' + query)\n    console.log('fetching data3:' + JSON.stringify(result))\n    return result;\n  }\n\n  async a() {\n    console.log('await');\n    let result = 'mlk'\n    result = await b()\n    result = await graphql(schema, 'query {collections}');\n    result = await graphql(schema, 'query {topicList(amount:1){...TopicFragment,urlList{url}}} fragment TopicFragment on Topic {id,title}');\n\n    console.log(\"graphql:\" + JSON.stringify(result));\n  }\n\n}\n"],"sourceRoot":"/source/"}