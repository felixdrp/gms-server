{"version":3,"sources":["data-fetch/global-fetch.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiBqB;AACnB,WADmB,WACnB,CAAY,IAAZ,EAAkB;;;wCADC,aACD;;AAChB,SAAK,IAAL,GAAY,QAAQ,QAAR;;AADI,QAGZ,SAAS,QAAT,EAAmB;;;AAGrB,WAAK,OAAL,GAAe,UAAC,KAAD,EAAW;AACxB,eAAO;AACL,gBAAM,WAAN;AACA,gBAAM,IAAN;AACA,kBAAQ,KAAR;AACA,gBAAM,oBAAoB,OAAQ,KAAR,CAApB;SAJR,CADwB;OAAX,CAHM;KAAvB,MAWO;;AAEL,WAAK,OAAL,GAAe,UAAC,KAAD,EAAW;AACxB,eAAO;AACL,gBAAM,SAAS,QAAT;AACN,gBAAM,SAAS,IAAT;AACN,kBAAQ,KAAR;AACA,gBAAM,oBAAoB,OAAQ,KAAR,CAApB;SAJR,CADwB;OAAX,CAFV;KAXP;;AAuBA,SAAK,MAAL,GAAc,UAAC,KAAD,EAAW;AACvB,aAAO,sBACL,UAAC,OAAD,EAAU,MAAV,EAAqB;AACnB,uBAAK,OAAL,CACI,MAAK,OAAL,CAAc,KAAd,CADJ,EAEI,UAAE,QAAF,EAAgB;AACd,cAAI,OAAO,EAAP,CADU;AAEd,mBAAS,EAAT,CAAY,MAAZ,EAAoB,UAAU,KAAV,EAAiB;AACnC,oBAAQ,KAAR,CADmC;WAAjB,CAApB,CAFc;;AAMd,mBAAS,EAAT,CAAY,KAAZ,EAAmB,YAAY;AAC7B,oBAAQ,GAAR,CAAY,UAAU,IAAV,CAAZ,CAD6B;AAE7B,oBAAS,KAAK,KAAL,CAAW,IAAX,CAAT,EAF6B;WAAZ,CAAnB,CANc;SAAhB,CAFJ,CAcG,GAdH,GADmB;OAArB,CADF,CADuB;KAAX,CA1BE;GAAlB;;6BADmB;;;4FAkDL;YACR;;;;;yBAAS;;;uBAGI,KAAK,MAAL,CAAa,KAAb;;;AAAf;;;;;;;;AAGA,wBAAQ,KAAR;;;iDAGK;;;;;;;;;;;;;;SA5DU","file":"data-fetch/global-fetch.js","sourcesContent":["/**\n * Module to Facade the data fetch from server and client.\n *\n *\n * Example usage:\n * ```\n * //Server\n * var fetcher = new GlobalFetch('server')\n *\n * // Client\n * var fetcher = new GlobalFetch()\n *\n * ```\n */\n\nimport http from 'http'\n\nexport default class GlobalFetch {\n  constructor(type) {\n    this.type = type || 'client';\n    // Create a different fetch for server and client\n    if (type === 'server') {\n      // Server fetching data .\n      // Change host and port if the server change in the future\n      this.options = (query) => {\n        return {\n          host: 'localhost',\n          port: 8009,\n          method: 'GET',\n          path: '/graphql?query=' + escape( query ),\n        }\n      };\n    } else {\n      // Client Fetching data.\n      this.options = (query) => {\n        return {\n          host: location.hostname,\n          port: location.port,\n          method: 'GET',\n          path: '/graphql?query=' + escape( query ),\n        }\n      };\n    }\n\n    this.client = (query) => {\n      return new Promise(\n        (resolve, reject) => {\n          http.request(\n              this.options( query ),\n              ( response ) => {\n                var data = '';\n                response.on('data', function (chunk) {\n                  data += chunk;\n                });\n\n                response.on('end', function () {\n                  console.log('X-D: ' + data);\n                  resolve( JSON.parse(data) );\n                });\n              }\n            )\n            .end();\n        }\n      );\n    };\n  }\n\n  async getData(query) {\n    let result = {};\n\n    try {\n      result = await this.client( query );\n    }\n    catch (e) {\n      console.error(e);\n    }\n\n    return result;\n  }\n\n}\n"],"sourceRoot":"/source/"}