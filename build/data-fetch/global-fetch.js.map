{"version":3,"sources":["data-fetch/global-fetch.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;IAmBqB,cACnB,SADmB,WACnB,CAAY,IAAZ,EAAkB;sCADC,aACD;;AAChB,OAAK,IAAL,GAAY,QAAQ,QAAR;;;AADI,MAIZ,SAAS,QAAT,EAAmB;AACrB,SAAK,MAAL,oBADqB;GAAvB,MAEO;AACL,SAAK,MAAL,GAAc,oBAAU;AACtB,iBAAW,kCAAc,UAAd,CAAX;KADY,CAAd,CADK;GAFP;;;;;;;;;;AAJgB,CAAlB;;;;;;;;;;;;;;;kBADmB","file":"data-fetch/global-fetch.js","sourcesContent":["/**\n * Module to Facade the data fetch from server and client.\n *\n *\n * Example usage:\n * ```\n * //Server\n * var fetcher = new GlobalFetch('server')\n *\n * // Client\n * var fetcher = new GlobalFetch()\n *\n * ```\n */\n\nimport { graphql } from 'graphql'\nimport Lokka from 'lokka';\nimport { Transport } from 'lokka-transport-http';\n\nexport default class GlobalFetch {\n  constructor(type) {\n    this.type = type || 'client';\n    // Create a different fetch for server and client\n    // create a new Lokka client\n    if (type === 'server') {\n      this.client = graphql;\n    } else {\n      this.client = new Lokka({\n        transport: new Transport('/graphql')\n      });\n    }\n    // console.log(this.client)\n\n    // // Get the initial data from the transport (it's a promise)\n    // this.dataPromise = this.client\n    //   // invoke the GraphQL query to get all the items\n    //   .query(`\n    //     {items}\n    //   `)\n    //   .then(res => res.items);\n  }\n\n\n\n}\n"],"sourceRoot":"/source/"}