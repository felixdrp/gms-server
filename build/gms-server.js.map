{"version":3,"sources":["gms-server.js"],"names":[],"mappings":"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","file":"gms-server.js","sourcesContent":["// * Express server\n// ***\nimport Express from 'express'\n\n// Used to respond to POST HTTP (used in graphql server)\n// http://expressjs.com/en/api.html#req.body\nimport bodyParser from 'body-parser'\nimport multer from 'multer'\nvar upload = multer(); // for parsing multipart/form-data\n\n// * React and react-router imports\n// ***\nimport React from 'react'\nimport { renderToString } from 'react-dom/server'\n\n// Check react-router doc: RoutingContext and RouterContext\n// import { match, RouterContext } from 'react-router'\nimport { match, RoutingContext } from 'react-router'\n// import { browserHistory, Router, Route, IndexRoute, Link } from 'react-router'\nimport createMemoryHistory from 'history/lib/createMemoryHistory';\nvar history = createMemoryHistory();\n\nimport Routes from './routes';\n\nimport qs from 'qs'\n\n// * Redux related imports\n// ***\n\nimport { applyMiddleware, compose, createStore, combineReducers } from 'redux'\n// Load Provider component.\nimport { Provider } from 'react-redux';\nimport { syncHistory, routeReducer, routeActions } from 'react-router-redux'\n\nimport counter from './reducers/reducer-1'\n\n// * GraphQl server. This part could be move to another server (modular and scale the system)\n// ***\nimport { graphql } from 'graphql'\nimport graphqlHTTP from 'express-graphql'\nimport schema from './graphql/schema'\n\nimport globalFetch from './data-fetch/global-fetch'\n\nvar fetcher = new globalFetch('server');\n// var fetcher = new globalFetch();\n\n// const store = createStore(counter)\n\nconst app = Express();\nconst PORT = 8009;\nconst routes = Routes( history );\n\nfunction renderFullPage(html, initialState) {\n  return `\n    <!doctype html>\n    <html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <title>Glasgow Memories Server</title>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/app.css\">\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script>\n          window.__INITIAL_STATE__ = ${JSON.stringify(initialState)}\n        </script>\n        <script src=\"/lib/bundle.js\"></script>\n      </body>\n    </html>\n  `\n}\n\n// We are going to fill these out in the sections to follow\nfunction handleRender(request, response) {\n  let query = qs.parse(request.query),\n      page = '',\n      location = {\n        ...history.createLocation(request.url),\n        query\n      };\n\n  console.log('location: ' + JSON.stringify(location))\n  console.log('location query: ' + JSON.stringify(query))\n\n  match({ routes, location: location }, (error, redirectLocation, renderProps) => {\n    if (error) {\n      response.status(500).send(error.message)\n    } else if (redirectLocation) {\n      response.redirect(302, redirectLocation.pathname + redirectLocation.search)\n    } else if (renderProps) {\n      // You can also check renderProps.components or renderProps.routes for\n      // your \"not found\" component or route respectively, and send a 404 as\n      // below, if you're using a catch-all route.\n      // res.status(200).send(renderToString(<RouterContext {...renderProps} />))\n\n      // debugger\n      // call a component static function\n\n      // create store\n      const middleware = syncHistory(history)\n      const reducer = combineReducers({\n        ...counter,\n        routing: routeReducer\n      })\n\n      // // Create Redux store with initial state\n      // // const store = createStore(counterApp, initialState)\n\n      const finalCreateStore = compose(\n        applyMiddleware(middleware)\n        // DevTools.instrument()\n        //\n      )(createStore)\n      const store = finalCreateStore(reducer)\n      middleware.listenForReplays(store)\n\n      // dispatch the first url location to give the url to the components.\n      store.dispatch( routeActions.push(location.pathname + location.search) );\n\n      console.log('store state: ' + JSON.stringify(store.getState()))\n\n      // In allComponentsDataConsult we will store all the chain of fetch data. The action and query\n      const allComponentsDataConsult = [];\n\n      // Fetch the data needed by the components to render.\n      // The variable renderProps.components is an array with all the React components needed to render a URL.\n      // Look for all fetchData method in the components list.\n      // Use each fetchData method to get the query and action to retrieve the data for each the component.\n\n      // queries is an array of promises that will contain the fetched data\n\n      //renderProps.components[2].customMethod('barquito');\n      let queries = renderProps.components.map(\n        (component) => {\n          if (component) {\n            let consult = {};\n            if ('fetchData' in component) {\n              consult = component.fetchData();\n              allComponentsDataConsult.push(consult);\n              return fetcher.getData( consult.query );\n            }\n            if ('customMethod' in component) {\n              return component.customMethod('barquito');\n            }\n          }\n\n          allComponentsDataConsult.push(false);\n          return false;\n        }\n      )\n      console.log(\n        queries\n      )\n\n      // Process all the data to the store.\n      Promise.all( queries ).then(function(values) {\n        console.log(values);\n\n        for ( let i=0|0; i < values.length; i++ ) {\n          if (values[i]) {\n            console.log(';-): store.dispatch ' + allComponentsDataConsult[i].action + ' ' + values[i]);\n\n          }\n        }\n\n        page = renderFullPage(\n          renderToString(\n            <Provider store={store}>\n              <RoutingContext {...renderProps} />\n            </Provider>\n          ),\n          // Pass initial info to the page with window.__INITIAL_STATE__ =\n          store.getState()\n        )\n\n        response.writeHead(200, {'Content-Type': 'text/html'});\n        response.end(page, () => {console.log('yahoo!!')});\n        // res.status(200).send(page);\n      });\n\n    } else {\n      // res.status(404).send('Not found')\n      response.writeHead(404, {'Content-Type': 'text/plain'})\n      response.end('Not found');\n    }\n  });\n}\n\n// This is fired every time the server side receives a request\n// app.use('/static', Express.static('public'));\napp.use(Express.static('public'));\n\n// Used to parse the info in the body of a POST HTTP server call (used in graphql server)\napp.use(bodyParser.json()); // for parsing application/json\napp.use(bodyParser.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded\n\n// * GraphQl server. This part could be move to another server (modular and scale the system)\n// ***\n// POST HTTP\napp.post( '/graphql', upload.array(), graphqlHTTP({ schema: schema, pretty: true }) );\n// GET HTTP\napp.use('/graphql', graphqlHTTP({ schema: schema, pretty: true }))\n\n// GMS Server\napp.use(handleRender)\n\napp.listen(PORT, function() {\n    //Callback triggered when server is successfully listening. Hurray!\n    console.log(\"Server listening on: http://localhost:%s\", PORT);\n})\n\nfunction b() {\n  return new Promise( (resolve, fail) => {resolve('its OK');} )\n}\nasync function a() {\n  console.log('await');\n  let result = 'mlk'\n  result = await b()\n  result = await graphql(schema, 'query {collections}');\n  result = await graphql(schema, 'query {topicList(amount:1){...TopicFragment,urlList{url}}} fragment TopicFragment on Topic {id,title}');\n\n  console.log(\"graphql:\" + JSON.stringify(result));\n}\n\n// a();\n"],"sourceRoot":"/source/"}