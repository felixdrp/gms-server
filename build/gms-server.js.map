{"version":3,"sources":["gms-server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAI,UAAU,oCAAV;;;;;;AAeJ,IAAM,MAAM,wBAAN;AACN,IAAM,OAAO,IAAP;AACN,IAAM,SAAS,sBAAQ,OAAR,CAAT;;AAEN,SAAS,cAAT,CAAwB,IAAxB,EAA8B,YAA9B,EAA4C;AAC1C,uOAQuB,2EAEc,KAAK,SAAL,CAAe,YAAf,yGAVrC,CAD0C;CAA5C;;;AAoBA,SAAS,YAAT,CAAsB,OAAtB,EAA+B,QAA/B,EAAyC;AACvC,MAAI,QAAQ,aAAG,KAAH,CAAS,QAAQ,KAAR,CAAjB;MACA,OAAO,EAAP;MACA,wBACK,QAAQ,cAAR,CAAuB,QAAQ,GAAR;AAC1B;IAFF,CAHmC;;AAQvC,UAAQ,GAAR,CAAY,eAAe,KAAK,SAAL,CAAe,QAAf,CAAf,CAAZ,CARuC;AASvC,UAAQ,GAAR,CAAY,qBAAqB,KAAK,SAAL,CAAe,KAAf,CAArB,CAAZ,CATuC;;AAWvC,0BAAM,EAAE,cAAF,EAAU,UAAU,QAAV,EAAhB,EAAsC,UAAC,KAAD,EAAQ,gBAAR,EAA0B,WAA1B,EAA0C;AAC9E,QAAI,KAAJ,EAAW;AACT,eAAS,MAAT,CAAgB,GAAhB,EAAqB,IAArB,CAA0B,MAAM,OAAN,CAA1B,CADS;KAAX,MAEO,IAAI,gBAAJ,EAAsB;AAC3B,eAAS,QAAT,CAAkB,GAAlB,EAAuB,iBAAiB,QAAjB,GAA4B,iBAAiB,MAAjB,CAAnD,CAD2B;KAAtB,MAEA,IAAI,WAAJ,EAAiB;;;;;;;;;;AAUtB,UAAM,aAAa,mCAAY,OAAZ,CAAb,CAVgB;AAWtB,UAAM,UAAU;AAEd;QAFc,CAAV;;;;;AAXgB,UAmBhB,mBAAmB,oBACvB,4BAAgB,UAAhB;;;AADuB,2BAAnB,CAnBgB;AAwBtB,UAAM,QAAQ,iBAAiB,OAAjB,CAAR,CAxBgB;AAyBtB,iBAAW,gBAAX,CAA4B,KAA5B,EAzBsB;;AA2BtB,YAAM,QAAN,CAAe,+BAAa,IAAb,CAAkB,SAAS,QAAT,GAAoB,SAAS,MAAT,CAArD,EA3BsB;;AA6BtB,cAAQ,GAAR,CAAY,kBAAkB,KAAK,SAAL,CAAe,MAAM,QAAN,EAAf,CAAlB,CAAZ,CA7BsB;;AA+BtB,kBAAY,UAAZ,CAAuB,CAAvB,EAA0B,YAA1B,CAAuC,UAAvC,EA/BsB;AAgCtB,aAAO,eACL,4BACE;;UAAU,OAAO,KAAP,EAAV;QACE,2DAAoB,WAApB,CADF;OADF,CADK;;AAOL;AACE,0BADF;AAEE,cAAK,IAAL;OATG,CAAP,CAhCsB;;AA6CtB,eAAS,SAAT,CAAmB,GAAnB,EAAwB,EAAC,gBAAgB,WAAhB,EAAzB,EA7CsB;AA8CtB,eAAS,GAAT,CAAa,IAAb,EAAmB,YAAM;AAAC,gBAAQ,GAAR,CAAY,SAAZ,EAAD;OAAN,CAAnB;;AA9CsB,KAAjB,MAgDA;;AAEL,iBAAS,SAAT,CAAmB,GAAnB,EAAwB,EAAC,gBAAgB,YAAhB,EAAzB,EAFK;AAGL,iBAAS,GAAT,CAAa,WAAb,EAHK;OAhDA;GAL6B,CAAtC,CAXuC;CAAzC;;;;AA0EA,IAAI,GAAJ,CAAQ,kBAAQ,MAAR,CAAe,QAAf,CAAR;AACA,IAAI,GAAJ,CAAQ,YAAR;;AAEA,IAAI,MAAJ,CAAW,IAAX,EAAiB,YAAW;;AAExB,UAAQ,GAAR,CAAY,0CAAZ,EAAwD,IAAxD,EAFwB;CAAX,CAAjB","file":"gms-server.js","sourcesContent":["import React from 'react'\nimport { renderToString } from 'react-dom/server'\nimport Express from 'express'\n\n// Check react-router doc: RoutingContext and RouterContext\n// import { match, RouterContext } from 'react-router'\nimport { match, RoutingContext } from 'react-router'\n// import { browserHistory, Router, Route, IndexRoute, Link } from 'react-router'\nimport createMemoryHistory from 'history/lib/createMemoryHistory';\nvar history = createMemoryHistory();\n\nimport Routes from './routes';\n\nimport qs from 'qs'\n\nimport { applyMiddleware, compose, createStore, combineReducers } from 'redux'\n// Load Provider component.\nimport { Provider } from 'react-redux';\nimport { syncHistory, routeReducer, routeActions } from 'react-router-redux'\n\nimport counter from './reducers/reducer-1'\n\n// const store = createStore(counter)\n\nconst app = Express()\nconst PORT = 8009\nconst routes = Routes( history );\n\nfunction renderFullPage(html, initialState) {\n  return `\n    <!doctype html>\n    <html>\n      <head>\n        <title>Glasgow Memories Server</title>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/app.css\">\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script>\n          window.__INITIAL_STATE__ = ${JSON.stringify(initialState)}\n        </script>\n        <script src=\"/lib/bundle.js\"></script>\n      </body>\n    </html>\n  `\n}\n\n// We are going to fill these out in the sections to follow\nfunction handleRender(request, response) {\n  let query = qs.parse(request.query),\n      page = '',\n      location = {\n        ...history.createLocation(request.url),\n        query\n      };\n\n  console.log('location: ' + JSON.stringify(location))\n  console.log('location query: ' + JSON.stringify(query))\n\n  match({ routes, location: location }, (error, redirectLocation, renderProps) => {\n    if (error) {\n      response.status(500).send(error.message)\n    } else if (redirectLocation) {\n      response.redirect(302, redirectLocation.pathname + redirectLocation.search)\n    } else if (renderProps) {\n      // You can also check renderProps.components or renderProps.routes for\n      // your \"not found\" component or route respectively, and send a 404 as\n      // below, if you're using a catch-all route.\n      // res.status(200).send(renderToString(<RouterContext {...renderProps} />))\n\n      // debugger\n      // call a component static function\n\n      // create store\n      const middleware = syncHistory(history)\n      const reducer = combineReducers({\n        ...counter,\n        routing: routeReducer\n      })\n\n      // // Create Redux store with initial state\n      // // const store = createStore(counterApp, initialState)\n\n      const finalCreateStore = compose(\n        applyMiddleware(middleware)\n        // DevTools.instrument()\n        //\n      )(createStore)\n      const store = finalCreateStore(reducer)\n      middleware.listenForReplays(store)\n\n      store.dispatch(routeActions.push(location.pathname + location.search));\n\n      console.log('store state: ' + JSON.stringify(store.getState()))\n\n      renderProps.components[2].customMethod('barquito');\n      page = renderFullPage(\n        renderToString(\n          <Provider store={store}>\n            <RoutingContext {...renderProps} />\n          </Provider>\n        ),\n        // Pass initial info to the page with window.__INITIAL_STATE__ =\n        {\n          location,\n          hola:'hi',\n        }\n      )\n\n      response.writeHead(200, {'Content-Type': 'text/html'})\n      response.end(page, () => {console.log('yahoo!!')});\n      // res.status(200).send(page);\n    } else {\n      // res.status(404).send('Not found')\n      response.writeHead(404, {'Content-Type': 'text/plain'})\n      response.end('Not found');\n    }\n  });\n}\n\n// This is fired every time the server side receives a request\n// app.use('/static', Express.static('public'));\napp.use(Express.static('public'));\napp.use(handleRender)\n\napp.listen(PORT, function() {\n    //Callback triggered when server is successfully listening. Hurray!\n    console.log(\"Server listening on: http://localhost:%s\", PORT);\n})\n"],"sourceRoot":"/source/"}