{"version":3,"sources":["gms-server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAM,UAAU,QAAQ,SAAR,CAAV;;;;AAWN,IAAM,QAAQ,0CAAR;;AAEN,IAAM,MAAM,wBAAN;AACN,IAAM,OAAO,IAAP;AACN,IAAM,SAAS,sBAAQ,oCAAR,CAAT;;AAEN,SAAS,cAAT,CAAwB,IAAxB,EAA8B,YAA9B,EAA4C;AAC1C,uOAQuB,2EAEc,KAAK,SAAL,CAAe,YAAf,yGAVrC,CAD0C;CAA5C;;;AAoBA,SAAS,YAAT,CAAsB,OAAtB,EAA+B,QAA/B,EAAyC;AACvC,MAAI,SAAS,aAAG,KAAH,CAAS,QAAQ,KAAR,CAAlB;MACA,OAAO,EAAP;MACA,WAAW,QAAQ,cAAR,CAAuB,QAAQ,GAAR,CAAlC,CAHmC;;AAKvC,UAAQ,GAAR,CAAY,KAAK,SAAL,CAAe,MAAf,CAAZ,EALuC;;AAOvC,0BAAM,EAAE,cAAF,EAAU,UAAU,QAAQ,GAAR,EAA1B,EAAyC,UAAC,KAAD,EAAQ,gBAAR,EAA0B,WAA1B,EAA0C;AACjF,QAAI,KAAJ,EAAW;AACT,eAAS,MAAT,CAAgB,GAAhB,EAAqB,IAArB,CAA0B,MAAM,OAAN,CAA1B,CADS;KAAX,MAEO,IAAI,gBAAJ,EAAsB;AAC3B,eAAS,QAAT,CAAkB,GAAlB,EAAuB,iBAAiB,QAAjB,GAA4B,iBAAiB,MAAjB,CAAnD,CAD2B;KAAtB,MAEA,IAAI,WAAJ,EAAiB;;;;;;;;AAQtB,kBAAY,UAAZ,CAAuB,CAAvB,EAA0B,YAA1B,CAAuC,UAAvC,EARsB;AAStB,aAAO,eACL,4BACE;;UAAU,OAAO,KAAP,EAAV;QACE,wEAAoB,eAAa,UAAU,QAAV,GAAjC,CADF;OADF,CADK;;AAOL;AACE,0BADF;AAEE,cAAK,IAAL;OATG,CAAP,CATsB;;AAsBtB,eAAS,SAAT,CAAmB,GAAnB,EAAwB,EAAC,gBAAgB,WAAhB,EAAzB,EAtBsB;AAuBtB,eAAS,GAAT,CAAa,IAAb,EAAmB,YAAM;AAAC,gBAAQ,GAAR,CAAY,SAAZ,EAAD;OAAN,CAAnB;;AAvBsB,KAAjB,MAyBA;;AAEL,iBAAS,SAAT,CAAmB,GAAnB,EAAwB,EAAC,gBAAgB,YAAhB,EAAzB,EAFK;AAGL,iBAAS,GAAT,CAAa,WAAb,EAHK;OAzBA;GALgC,CAAzC,CAPuC;CAAzC;;;;AA+CA,IAAI,GAAJ,CAAQ,kBAAQ,MAAR,CAAe,QAAf,CAAR;AACA,IAAI,GAAJ,CAAQ,YAAR;;AAEA,IAAI,MAAJ,CAAW,IAAX,EAAiB,YAAW;;AAExB,UAAQ,GAAR,CAAY,0CAAZ,EAAwD,IAAxD,EAFwB;CAAX,CAAjB","file":"gms-server.js","sourcesContent":["import React from 'react'\nimport { renderToString } from 'react-dom/server'\nimport Express from 'express'\n\n// Check react-router doc: RoutingContext and RouterContext\n// import { match, RouterContext } from 'react-router'\nimport { match, RoutingContext } from 'react-router'\n// import { browserHistory, Router, Route, IndexRoute, Link } from 'react-router'\nimport createMemoryHistory from 'history/lib/createMemoryHistory';\nconst history = require('history');\n\nimport Routes from './routes';\n\nimport qs from 'qs'\nimport { createStore } from 'redux'\n// Load Provider component.\nimport { Provider } from 'react-redux';\n\nimport counter from './reducers/reducer-1'\n\nconst store = createStore(counter)\n\nconst app = Express()\nconst PORT = 8009\nconst routes = Routes( createMemoryHistory() );\n\nfunction renderFullPage(html, initialState) {\n  return `\n    <!doctype html>\n    <html>\n      <head>\n        <title>Glasgow Memories Server</title>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/app.css\">\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script>\n          window.__INITIAL_STATE__ = ${JSON.stringify(initialState)}\n        </script>\n        <script src=\"/lib/bundle.js\"></script>\n      </body>\n    </html>\n  `\n}\n\n// We are going to fill these out in the sections to follow\nfunction handleRender(request, response) {\n  let params = qs.parse(request.query),\n      page = '',\n      location = history.createLocation(request.url);\n\n  console.log(JSON.stringify(params))\n\n  match({ routes, location: request.url }, (error, redirectLocation, renderProps) => {\n    if (error) {\n      response.status(500).send(error.message)\n    } else if (redirectLocation) {\n      response.redirect(302, redirectLocation.pathname + redirectLocation.search)\n    } else if (renderProps) {\n      // You can also check renderProps.components or renderProps.routes for\n      // your \"not found\" component or route respectively, and send a 404 as\n      // below, if you're using a catch-all route.\n      // res.status(200).send(renderToString(<RouterContext {...renderProps} />))\n\n      // debugger\n      // call a component static function\n      renderProps.components[2].customMethod('barquito');\n      page = renderFullPage(\n        renderToString(\n          <Provider store={store}>\n            <RoutingContext {...renderProps} location={location} />\n          </Provider>\n        ),\n        // Pass initial info to the page with window.__INITIAL_STATE__ =\n        {\n          location,\n          hola:'hi',\n        }\n      )\n\n      response.writeHead(200, {'Content-Type': 'text/html'})\n      response.end(page, () => {console.log('yahoo!!')});\n      // res.status(200).send(page);\n    } else {\n      // res.status(404).send('Not found')\n      response.writeHead(404, {'Content-Type': 'text/plain'})\n      response.end('Not found');\n    }\n  });\n}\n\n// This is fired every time the server side receives a request\n// app.use('/static', Express.static('public'));\napp.use(Express.static('public'));\napp.use(handleRender)\n\napp.listen(PORT, function() {\n    //Callback triggered when server is successfully listening. Hurray!\n    console.log(\"Server listening on: http://localhost:%s\", PORT);\n})\n"],"sourceRoot":"/source/"}