{"version":3,"sources":["gms-server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAM,UAAU,QAAQ,SAAR,CAAV;;;AAWN,IAAM,QAAQ,0CAAR;;AAEN,IAAM,MAAM,wBAAN;AACN,IAAM,OAAO,IAAP;AACN,IAAM,SAAS,sBAAQ,oCAAR,CAAT;;AAEN,SAAS,cAAT,CAAwB,IAAxB,EAA8B,YAA9B,EAA4C;AAC1C,mKAOuB,2EAEc,KAAK,SAAL,CAAe,YAAf,2GATrC,CAD0C;CAA5C;;;AAmBA,SAAS,YAAT,CAAsB,GAAtB,EAA2B,GAA3B,EAAgC;AAC9B,MAAI,UAAU,GAAV;MACA,WAAW,GAAX;MACA,SAAS,aAAG,KAAH,CAAS,IAAI,KAAJ,CAAlB;MACA,OAAO,EAAP;MACA,WAAW,QAAQ,cAAR,CAAuB,IAAI,GAAJ,CAAlC,CAL0B;;AAOhC,UAAQ,GAAR,CAAY,KAAK,SAAL,CAAe,MAAf,CAAZ,EAPgC;;AAS9B,0BAAM,EAAE,cAAF,EAAU,UAAU,IAAI,GAAJ,EAA1B,EAAqC,UAAC,KAAD,EAAQ,gBAAR,EAA0B,WAA1B,EAA0C;AAC7E,QAAI,KAAJ,EAAW;AACT,UAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,MAAM,OAAN,CAArB,CADS;KAAX,MAEO,IAAI,gBAAJ,EAAsB;AAC3B,UAAI,QAAJ,CAAa,GAAb,EAAkB,iBAAiB,QAAjB,GAA4B,iBAAiB,MAAjB,CAA9C,CAD2B;KAAtB,MAEA,IAAI,WAAJ,EAAiB;;;;;AAKtB,aAAO,eACL,4BACE;;UAAU,OAAO,KAAP,EAAV;QACE,wEAAoB,eAAa,UAAU,QAAV,GAAjC,CADF;OADF,CADK;;AAOL;AACE,0BADF;AAEE,cAAK,IAAL;OATG,CAAP,CALsB;;AAkBtB,eAAS,SAAT,CAAmB,GAAnB,EAAwB,EAAC,gBAAgB,WAAhB,EAAzB,EAlBsB;AAmBtB,eAAS,GAAT,CAAa,IAAb,EAAmB,YAAM;AAAC,gBAAQ,GAAR,CAAY,QAAZ,EAAD;OAAN,CAAnB;;AAnBsB,KAAjB,MAqBA;;AAEL,iBAAS,SAAT,CAAmB,GAAnB,EAAwB,EAAC,gBAAgB,YAAhB,EAAzB,EAFK;AAGL,iBAAS,GAAT,CAAa,WAAb,EAHK;OArBA;GAL4B,CAArC,CAT8B;CAAhC;;;;AA6CA,IAAI,GAAJ,CAAQ,kBAAQ,MAAR,CAAe,QAAf,CAAR;AACA,IAAI,GAAJ,CAAQ,YAAR;;AAEA,IAAI,MAAJ,CAAW,IAAX,EAAiB,YAAW;;AAExB,UAAQ,GAAR,CAAY,0CAAZ,EAAwD,IAAxD,EAFwB;CAAX,CAAjB","file":"gms-server.js","sourcesContent":["import React from 'react'\nimport { renderToString } from 'react-dom/server'\nimport Express from 'express'\n\n// Check react-router doc: RoutingContext and RouterContext\n// import { match, RouterContext } from 'react-router'\nimport { match, RoutingContext } from 'react-router'\n// import { browserHistory, Router, Route, IndexRoute, Link } from 'react-router'\nimport createMemoryHistory from 'history/lib/createMemoryHistory';\nconst history = require('history');\n\nimport Routes from './routes';\n\nimport qs from 'qs'\nimport { createStore } from 'redux'\n// Load Provider component.\nimport { Provider } from 'react-redux';\n\nimport counter from './reducers/reducer-1'\n\nconst store = createStore(counter)\n\nconst app = Express()\nconst PORT = 8009\nconst routes = Routes( createMemoryHistory() );\n\nfunction renderFullPage(html, initialState) {\n  return `\n    <!doctype html>\n    <html>\n      <head>\n        <title>Glasgow Memories Server</title>\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script>\n          window.__INITIAL_STATE__ = ${JSON.stringify(initialState)}\n        </script>\n        <script src=\"/lib/bundle.js\"></script>\n      </body>\n    </html>\n    `\n}\n\n// We are going to fill these out in the sections to follow\nfunction handleRender(req, res) {\n  let request = req,\n      response = res,\n      params = qs.parse(req.query),\n      page = '',\n      location = history.createLocation(req.url);\n\nconsole.log(JSON.stringify(params))\n\n  match({ routes, location: req.url }, (error, redirectLocation, renderProps) => {\n    if (error) {\n      res.status(500).send(error.message)\n    } else if (redirectLocation) {\n      res.redirect(302, redirectLocation.pathname + redirectLocation.search)\n    } else if (renderProps) {\n      // You can also check renderProps.components or renderProps.routes for\n      // your \"not found\" component or route respectively, and send a 404 as\n      // below, if you're using a catch-all route.\n      // res.status(200).send(renderToString(<RouterContext {...renderProps} />))\n      page = renderFullPage(\n        renderToString(\n          <Provider store={store}>\n            <RoutingContext {...renderProps} location={location} />\n          </Provider>\n        ),\n        // Pass initial info to the page with window.__INITIAL_STATE__ =\n        {\n          location,\n          hola:'hi',\n        }\n      )\n\n      response.writeHead(200, {'Content-Type': 'text/html'})\n      response.end(page, () => {console.log('yupi!!')});\n      // res.status(200).send(page);\n    } else {\n      // res.status(404).send('Not found')\n      response.writeHead(404, {'Content-Type': 'text/plain'})\n      response.end('Not found');\n    }\n  });\n}\n\n// This is fired every time the server side receives a request\n// app.use('/static', Express.static('public'));\napp.use(Express.static('public'));\napp.use(handleRender)\n\napp.listen(PORT, function() {\n    //Callback triggered when server is successfully listening. Hurray!\n    console.log(\"Server listening on: http://localhost:%s\", PORT);\n})\n"],"sourceRoot":"/source/"}